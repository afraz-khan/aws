AWSTemplateFormatVersion: '2010-09-09'
Description: AWS root user activity monitoring via CloudTrail.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Amazon SNS parameters
      Parameters:
      - Email Address
Parameters:
  EmailAddress:
    Type: String
    AllowedPattern: "^[\\x20-\\x45]?[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"
    ConstraintDescription: Email address required.
    Description: Enter an email address you want to subscribe to the Amazon SNS topic
      that will send notifications if your account's AWS root user logs in.
  MultiRegionDeployment: 
    Description: |
      Check for restricting re-deployment of global resources.
      If stack is deployed in some other region at-least once then give value TRUE.
    Default: false
    Type: String
    AllowedValues: 
      - false
      - true
Conditions: 
  CreateNewIAMRole: !Equals [!Ref MultiRegionDeployment, false]
Mappings:
  NamingMapping:
    LambdaIAMRole:
      Name: MonitorRootUserActivity-Role
Resources:
  LambdaRoleWaitHandle: 
    Condition: CreateNewIAMRole
    DependsOn: MonitorRootUserLambdaRole
    Type: "AWS::CloudFormation::WaitConditionHandle"
  WaitHandle: 
    Type: "AWS::CloudFormation::WaitConditionHandle"
  
  # Condition for root activity lambda function dependency on IAM role.
  LambdaRoleWaitCondition: 
    Type: "AWS::CloudFormation::WaitCondition"
    Properties: 
      Handle: !If [CreateNewIAMRole, !Ref LambdaRoleWaitHandle, !Ref WaitHandle]
      Timeout: "1"
      Count: 0
  MonitorRootUserLambdaFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: | 

          import json
          import boto3
          import logging
          import os
          import botocore.session
          from botocore.exceptions import ClientError
          session = botocore.session.get_session()

          logging.basicConfig(level=logging.DEBUG)
          logger=logging.getLogger(__name__)

          def lambda_handler(event, context):
            logger.setLevel(logging.DEBUG)
            eventname = event['detail']['eventName']
            snsARN = os.environ['SNS_TOPIC_ARN']          #Getting the SNS Topic ARN passed in by the environment variables.
            region = event['detail']['awsRegion']

            logger.debug("Event Name is--- %s" %eventname)
            
            client = boto3.client('iam')
            snsclient = boto3.client('sns')
            response = client.list_account_aliases()
            logger.debug("List Account Alias response --- %s" %response)
            
            try:
              if not response['AccountAliases']:
                accntAliase = (boto3.client('sts').get_caller_identity()['Account'])
                logger.info("Account Aliase is not defined. Account ID is %s" %accntAliase)
              else:
                accntAliase = response['AccountAliases'][0]
                logger.info("Account Aliase is : %s" %accntAliase)
            
            except ClientError as e:
              logger.error("Clien Error occured")
            
            try: 

              subject = ("Root API call-\"%s\" detected in Account-\"%s\" in Region-\"%s\"" %(eventname,accntAliase, region))[:100]
              if region == 'global':
                subject = ("Root API call-\"%s\" detected in Account-\"%s\"" %(eventname,accntAliase))[:100]

              #Sending the notification...
              snspublish = snsclient.publish(
                      TargetArn= snsARN,
                      Subject=(subject),
                      Message=json.dumps({'default':json.dumps(event)}),
                      MessageStructure='json')
              logger.debug("SNS publish response is-- %s" %snspublish)
            except ClientError as e:
              logger.error("An error occured: %s" %e)
      Description: |
        Lambda for publishing custom email message to SNS topic for 
        AWS root user activity monitoring.
      Environment: 
        Variables:
          SNS_TOPIC_ARN: !Ref MonitorRootUserSNSTopic
      FunctionName: MonitorRootUserActivity-Lambda
      Handler: index.lambda_handler
      Role: !Sub 
        - 'arn:aws:iam::${AWS::AccountId}:role/${RoleName}'
        - { RoleName : !FindInMap [NamingMapping, LambdaIAMRole, Name]}
      Runtime: python3.8
      Timeout: 300
    DependsOn: 
    - LambdaRoleWaitCondition
    - MonitorRootUserSNSTopic
  MonitorRootUserLambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: IAM role for MonitorRootUserActivity lambda function.
      Policies: 
        - PolicyName: MonitorRootUserActivity-IAM-Policy
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
            - Sid: LogStreamAccess
              Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:
              - arn:aws:logs:*:*:*
            - Sid: SNSPublishAllow
              Effect: Allow
              Action:
              - sns:Publish
              Resource:
              - arn:aws:sns:*:*:*
            - Sid: ListAccountAlias
              Action:
              - iam:ListAccountAliases
              Effect: Allow
              Resource: "*"
      RoleName: !FindInMap [NamingMapping, LambdaIAMRole, Name]
    Condition: CreateNewIAMRole
  MonitorRootUserLambdaResourcePolicy:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MonitorRootUserLambdaFunction.Arn
      Principal: events.amazonaws.com
      SourceArn: !Sub
        - arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/${RuleName}
        - { RuleName: !Ref MonitorRootUserEventsRule}
    DependsOn: 
    - MonitorRootUserLambdaFunction
  MonitorRootUserSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: MonitorRootUserActivity-SNS-Topic
      Subscription:
      - Endpoint:
          Ref: EmailAddress
        Protocol: email
      TopicName: MonitorRootUserActivity-SNS-Topic
  MonitorRootUserEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Events rule for monitoring AWS root user activity in account.
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        - AWS Console Sign In via CloudTrail
        detail:
          userIdentity:
            type:
            - Root
      Name: MonitorRootUserActivity-EventsRule
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
            - MonitorRootUserLambdaFunction
            - Arn
        Id: 
          Ref: AWS::StackName
    DependsOn:
    - MonitorRootUserLambdaFunction
  MonitorRootUserSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: MonitorRootUserActivity-SNS-Policy-Doc
        Version: '2012-10-17'
        Statement:
        - Sid: MonitorRootUserActivity-SNS-Policy-Doc
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sns:Publish
          Resource:
          - Ref: MonitorRootUserSNSTopic
      Topics:
      - Ref: MonitorRootUserSNSTopic
Outputs:
  EventsRule:
    Value: !Ref MonitorRootUserEventsRule
    Description: Monitor Root User Activity Event Rule ID.
  LambdaFunction:
    Value: !Ref MonitorRootUserLambdaFunction
    Description: Monitor Root User Activity Lambda Function.
  LambdaIAMRole:
    Value: | 
      !If [CreateNewIAMRole, !Ref MonitorRootUserLambdaRole, 
      !FindInMap [NamingMapping, LambdaIAMRole, Name]]
    Description: Monitor Root User Activity IAM Role.
  SNSTopic:
    Value: !Ref MonitorRootUserSNSTopic
    Description: Monitor Root User Activity SNS Topic.
